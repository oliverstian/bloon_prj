C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPT
OBJECT MODULE PLACED IN ..\object\Interrupt.obj
COMPILER INVOKED BY: E:\StudySoftWareInstall\keil4\C51\BIN\C51.EXE ..\user_files\Interrupt.c BROWSE INCDIR(..\user_files
                    -) DEBUG OBJECTEXTEND PRINT(.\Interrupt.lst) TABS(2) OBJECT(..\object\Interrupt.obj)

line level    source

   1          #include"Stc12c5a.h"
   2          #include"GlobalDeclare.h"
   3          #include"Interrupt.h"
   4          
   5          #define TIMER_0    0
   6          #define TIMER_1    1
   7          
   8          //#define CRYSTAL_12M
   9          #define CRYSTAL_11P0592M
  10          
  11          
  12          #ifdef CRYSTAL_12M
              #define FOSC     12000000L  //12M
              #elif defined CRYSTAL_11P0592M
  15          #define FOSC     11059200L  //11.0592M
  16          #else
              #define FOSC     12000000L  //12M
              #endif
  19          
  20          #define TIME_MS_T0   5      //5ms
  21          #define TIME_MS_T1   1      //50ms
  22          #define T0_CNT   (65536-(TIME_MS_T0*(FOSC/12/1000)))  //every count cost 1000/(FOSC/12) ms,so,1ms need (FO
             -SC/12)/1000 count
  23          #define T1_CNT   (65536-(TIME_MS_T1*(FOSC/12/1000))) //take care of overflow,i mean count value >65536
  24          
  25          #define BAUD_9600   (256-((FOSC)/16/9600))
  26          #define BAUD_115200 (256-((FOSC)/16/115200))
  27          
  28          
  29          //************************interrupt name****************************
  30          #define EXT0_I      0x0001
  31          #define TIMER0_I    0x0002
  32          #define EXT1_I      0x0004
  33          #define TIMER1_I    0x0008
  34          #define UART1_I     0x0010
  35          #define ADC_I       0x0020
  36          #define LVD_I       0x0040
  37          #define EA_I        0x0080  //main switch
  38          #define PCA_I       0x0100
  39          #define UART2_I     0x0200
  40          #define SPI_I       0x0400
  41          
  42          //***********************interrupt vector num***********************
  43          #define EXT0_VEC      0
  44          #define TIMER0_VEC    1
  45          #define EXT1_VEC      2
  46          #define TIMER1_VEC    3
  47          #define UART1_VEC     4
  48          #define ADC_VEC       5
  49          #define LVD_VEC       6
  50          #define PCA_VEC       7
  51          #define UART2_VEC     8
  52          #define SPI_VEC       9
  53          
C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 2   

  54          
  55          
  56          bit ExperiFlag = 0;
  57          INT16U ExPeriCout=0;
*** WARNING C231 IN LINE 57 OF ..\user_files\Interrupt.c: 'ExPeriCout': redefinition
  58          bit uart_test = 0;
  59          
  60          
  61          void EnInterrupt(INT16U IntNum, bit Contr)
  62          {
  63   1        if(Contr == Enable)
  64   1        {
  65   2          IE |= (INT8U)IntNum;
  66   2          IE2 |= (IntNum>>9);  //right shift 9 bit,notice PCA not mention in PDF
  67   2        }
  68   1        else if(Contr == Disable)
  69   1        {
  70   2          IE &= ~(INT8U)IntNum;
  71   2          IE2 &= ~(IntNum>>9);
  72   2        }
  73   1      }
  74          
  75          //********************************Timer relevant******************************/
  76          void TimerInit()
  77          {
  78   1        TMOD &= 0xf1;  // timer0 mode 1,16bit timer
  79   1        TMOD |= 0x01;
  80   1        AUXR &= 0x7f;  //sysclk/12
  81   1        TL0 = T0_CNT;
  82   1        TH0 = T0_CNT >> 8;
  83   1        
  84   1        TMOD &= 0x1f;  // timer1 mode 1,16bit timer
  85   1        TMOD |= 0x10;  
  86   1          AUXR &= 0xbf;  // sysclk/12
  87   1          TL1 = T1_CNT;
  88   1        TH1 = T1_CNT >> 8;
  89   1      }
  90          
  91          void TimerStart(bit Tnum,bit contr)
  92          {
  93   1        if(Tnum == TIMER_0)
  94   1        {
  95   2          if(contr == Enable)
  96   2          {
  97   3            TCON |= 0x10;
  98   3          }
  99   2          else if(contr == Disable)
 100   2          {
 101   3            TCON &= 0xef;
 102   3          }
 103   2        }
 104   1        else if(Tnum == TIMER_1)
 105   1        {
 106   2          if(contr == Enable)
 107   2          {
 108   3            TCON |= 0x40;
 109   3          }
 110   2          else if(contr == Disable)
 111   2          {
 112   3            TCON &= 0xbf;
 113   3          }
 114   2        }
C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 3   

 115   1      }
 116          
 117          void Timer0Interrupt() interrupt TIMER0_VEC   //5ms
 118          {
 119   1        TL0 = T0_CNT;
 120   1        TH0 = T0_CNT >> 8;
 121   1        if(ExPeriCout++>100)
 122   1        {
 123   2          ExPeriCout = 0;
 124   2          ExperiFlag = !ExperiFlag;
 125   2        }
 126   1      }
 127          
 128          void Timer1Interrupt() interrupt TIMER1_VEC using 1 //50ms
 129          {
 130   1        TL1 = T1_CNT;
 131   1        TH1 = T1_CNT >> 8;
 132   1        if(ExPeriCout++>10)
 133   1        {
 134   2          ExPeriCout = 0;
 135   2          ExperiFlag = !ExperiFlag;
 136   2        }
 137   1      }
 138          
 139          //************************************************************************
 140          
 141          //*************************UART 1 relevant********************************
 142          #if 0
              typedef struct 
              {
                INT8U UartTxSta;
                INT8U UartTxSta;
                INT8U *RxBuffer;
              }
              sUartStatus;
              
              #endif
 152          INT8U Table[10];
 153          INT8U Count=0;
 154          
 155          #define UART_1     0x01
 156          #define UART_2     0x02
 157          #define UART_TI_FLG   0x01
 158          #define UART_RI_FLG   0x02
 159          
 160          
 161          void UartConfig(INT8U Uartx,INT8U Baud) //notice that UART1 & UART2 baud need to be set to the same(use co
             -mmon baud degenerator),except some special ways
 162          {
 163   1        if((Uartx&UART_1) == UART_1)
 164   1          {
 165   2          PCON |= 0x80;  //PCON.bit7/SMOD=1; baud degenerator double
 166   2          PCON &= 0xbf;  //PCON.bit6/SMOD0=0;
 167   2          SM0 = 0;       //Mode 1,8 bit 
 168   2          SM1 = 1;
 169   2          BRT = Baud;
 170   2              AUXR |= 0x04;  //AUXR.bit2/BRTx12=1;independent baud degenerator count every 1 sysclk cycle
 171   2          AUXR |= 0x01;  //AUXR.bit4/BRTR =1; allow independent baud degenerator
 172   2          AUXR |= 0x10;  //AUXR.bit0/S1BRS=1; activate independent baud degenerator,release T1;
 173   2        }
 174   1        
 175   1        if((Uartx&UART_2) == UART_2)
C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 4   

 176   1        {
 177   2          S2CON &= 0x7f; //S2CON.bit7/S2SM0=0; Mode 1,8 bit,baud changeable
 178   2          S2CON |= 0x40; //S2CON.bit6/S2SM1=1;
 179   2          BRT = Baud;
 180   2          AUXR |= 0x08;  //AUXR.bit3/S2SMOD=1; baud degenerator double
 181   2          AUXR |= 0x04;  //AUXR.bit2/BRTx12=1; independent baud degenerator count every 1 sysclk cycle
 182   2          AUXR1 &= 0xef; //AUXR1.bit4/S2_P4=0; URAT2 located in P1 Port
 183   2          //AUXR1 |= 0x10; //AUXR1.bit4/S2_P4=0; URAT2 located in P4 Port
 184   2        }
 185   1      }
 186          
 187          void StartUart_RX(INT8U Uartx,bit Contr)
 188          {
 189   1          if((Uartx&UART_1) == UART_1)
 190   1          {
 191   2          if(Contr == Enable)
 192   2          {
 193   3            REN = 1;
 194   3          }
 195   2          else if(Contr == Disable)
 196   2          {
 197   3            REN = 0;
 198   3          }
 199   2        }
 200   1      
 201   1        if((Uartx&UART_2) == UART_2)
 202   1        {
 203   2          if(Contr == Enable)
 204   2          {
 205   3            S2CON |= 0x10;  //bit4/S2REN
 206   3          }
 207   2          else if(Contr == Disable)
 208   2          {
 209   3            S2CON &= 0xef;  //bit4/S2REN
 210   3          }
 211   2        }
 212   1      }
 213          
 214          #if 0
              void StartUart_TX(bit Uartx,bit Contr)
              {
                
              }
              #endif
 220          
 221          bit UartReadFlg(INT8U Uartx,INT8U UartFlg)  //Read a flag one time
 222          {
 223   1        bit StatusTemp=RESET;
 224   1        
 225   1        if(Uartx == UART_1)
 226   1        {
 227   2          switch(UartFlg)
 228   2          {
 229   3            case UART_TI_FLG:StatusTemp = TI;break;
 230   3            case UART_RI_FLG:StatusTemp = RI;break;
 231   3          }
 232   2        }
 233   1        else if(Uartx == UART_2)
 234   1        {
 235   2          switch(UartFlg)
 236   2          {
 237   3            case UART_TI_FLG:StatusTemp = (bit)(S2CON&0x02);break;
C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 5   

 238   3            case UART_RI_FLG:StatusTemp = (bit)(S2CON&0x01);break;
 239   3          }
 240   2        }
 241   1        
 242   1        return StatusTemp;
 243   1      }
 244          
 245          void UartClearFlg(INT8U Uartx,INT8U UartFlg)
 246          {
 247   1        if((Uartx&UART_1) == UART_1)
 248   1        {
 249   2          if((UartFlg&UART_TI_FLG) == UART_TI_FLG)
 250   2          {
 251   3            TI = 0;
 252   3          }
 253   2      
 254   2          if((UartFlg&UART_RI_FLG) == UART_RI_FLG)
 255   2          {
 256   3            RI = 0;
 257   3          }
 258   2        }
 259   1      
 260   1        if((Uartx&UART_2) == UART_2)
 261   1        {
 262   2          if((UartFlg&UART_TI_FLG) == UART_TI_FLG)
 263   2          {
 264   3            S2CON &= 0xfd;  //S2TI=0;
 265   3          }
 266   2      
 267   2          if((UartFlg&UART_RI_FLG) == UART_RI_FLG)
 268   2          {
 269   3            S2CON &= 0xfe;  //S2RI=0;
 270   3          }
 271   2        }
 272   1      }
 273          
 274          void UartInit()
 275          {
 276   1        UartConfig(UART_1|UART_2,BAUD_9600);
 277   1        EnInterrupt(UART1_I|UART2_I,Enable);
 278   1        StartUart_RX(UART_2,Enable);
 279   1      }
 280          
 281          void Uart1ISR() interrupt UART1_VEC
 282          {
 283   1        if(UartReadFlg(UART_1,UART_RI_FLG) == SET)
 284   1        {
 285   2          UartClearFlg(UART_1,UART_RI_FLG);
 286   2          //uart_test = !uart_test;
 287   2          //Count++;
 288   2          //Table[0] = SBUF;
 289   2          //SBUF = Table[0];
 290   2        }
 291   1      
 292   1        if(UartReadFlg(UART_1,UART_TI_FLG) == SET)
 293   1        {
 294   2          UartClearFlg(UART_1,UART_TI_FLG);
 295   2        }
 296   1      }
 297          
 298          void Uart2ISR() interrupt UART2_VEC
 299          {
C51 COMPILER V9.51   INTERRUPT                                                             04/25/2018 15:29:32 PAGE 6   

 300   1        if(UartReadFlg(UART_2,UART_RI_FLG) == SET)
 301   1        {
 302   2          UartClearFlg(UART_2,UART_RI_FLG);
 303   2          uart_test = !uart_test;
 304   2          Count++;
 305   2          Table[0] = S2BUF;
 306   2          S2BUF = 0x44;
 307   2        }
 308   1      
 309   1        if(UartReadFlg(UART_2,UART_TI_FLG) == SET)
 310   1        {
 311   2          UartClearFlg(UART_2,UART_TI_FLG);
 312   2        }
 313   1      }
 314          
 315          
 316          void InterruptInit()
 317          {
 318   1        TimerInit();
 319   1        EnInterrupt(EA_I|TIMER1_I|TIMER0_I,Enable);
 320   1        EnInterrupt(TIMER1_I,Disable);
 321   1        TimerStart(TIMER_1,Enable);
 322   1        TimerStart(TIMER_0,Enable);
 323   1        UartInit();
 324   1      }
 325          
 326          
 327          
 328          
 329          
 330          
 331          
 332          
 333          
 334          
 335          
 336          
 337          
 338          
 339          
 340          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    510    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
