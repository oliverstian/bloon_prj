C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE COMMUTASK
OBJECT MODULE PLACED IN ..\object\CommuTask.obj
COMPILER INVOKED BY: E:\StudySoftWareInstall\keil4\C51\BIN\C51.EXE ..\user_files\CommuTask.c BROWSE INCDIR(..\user_files
                    -) DEBUG OBJECTEXTEND PRINT(.\CommuTask.lst) TABS(2) OBJECT(..\object\CommuTask.obj)

line level    source

   1          #include"Stc12c5a.h"
   2          #include"Global.h"
   3          #include"CommuTask.h"
   4          #include"DS18B20.h"
   5          #include <string.h>
   6          #include"EEProm.h"
   7          #include"IO.h"
   8          #include"MC20.h"
   9          
  10          #define BAUD_9600
  11          //#define BAUD_115200
  12          
  13          #ifdef BAUD_9600
  14          #define MCU_BAUD   (256-((FOSC)/16/9600))
  15          #define MC20_BAUD  9600
  16          #elif defined BAUD_115200
              #define MCU_BAUD   (256-((FOSC)/16/115200))
              #define MC20_BAUD  115200
              #else
              #define MCU_BAUD   (256-((FOSC)/16/9600))
              #define MC20_BAUD  9600
              #endif
  23          
  24          #define REG_NUM  ((EXTER_TX_MAX_SIZE-10)/2)  //reserve 10 byte for other usage
  25          
  26          //#define BAUD_9600   (256-((FOSC)/16/9600))
  27          //#define BAUD_115200 (256-((FOSC)/16/115200))
  28          
  29          XINT8U InterRxBuff[INTER_RX_MAX_SIZE];
  30          XINT8U BackUpRxBuf[INTER_RX_MAX_SIZE];
  31          XINT8U InterTxBuff[INTER_TX_MAX_SIZE];
  32          XINT8U ExterRxBuff[EXTER_RX_MAX_SIZE];
  33          XINT8U ExterTxBuff[EXTER_TX_MAX_SIZE];
  34          
  35          xdata INT8U tbExterTempBuf[15];
  36          
  37          idata sInterRxManage sInterRx;
  38          idata sRxManage sExterRx;
  39          idata sTxManage sInterTx;
  40          idata sTxManage sExterTx;
  41          
  42          void UartConfig(INT8U Uartx,INT8U Baud) //notice that UART1 & UART2 baud need to be set to the same(use co
             -mmon baud degenerator),except some special ways
  43          {
  44   1        if((Uartx&UART_1) == UART_1)
  45   1          {
  46   2          PCON |= 0x80;  //PCON.bit7/SMOD=1; baud degenerator double
  47   2          PCON &= 0xbf;  //PCON.bit6/SMOD0=0;
  48   2          SM0 = 0;       //Mode 1,8 bit 
  49   2          SM1 = 1;
  50   2          BRT = Baud;
  51   2              AUXR |= 0x04;  //AUXR.bit2/BRTx12=1;independent baud degenerator count every 1 sysclk cycle
  52   2          AUXR |= 0x01;  //AUXR.bit4/BRTR =1; allow independent baud degenerator
  53   2          AUXR |= 0x10;  //AUXR.bit0/S1BRS=1; activate independent baud degenerator,release T1;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 2   

  54   2        }
  55   1        
  56   1        if((Uartx&UART_2) == UART_2)
  57   1        {
  58   2          S2CON &= 0x7f; //S2CON.bit7/S2SM0=0; Mode 1,8 bit,baud changeable
  59   2          S2CON |= 0x40; //S2CON.bit6/S2SM1=1;
  60   2          BRT = Baud;
  61   2          AUXR |= 0x08;  //AUXR.bit3/S2SMOD=1; baud degenerator double
  62   2          AUXR |= 0x04;  //AUXR.bit2/BRTx12=1; independent baud degenerator count every 1 sysclk cycle
  63   2          AUXR1 &= 0xef; //AUXR1.bit4/S2_P4=0; URAT2 located in P1 Port
  64   2          //AUXR1 |= 0x10; //AUXR1.bit4/S2_P4=0; URAT2 located in P4 Port
  65   2        }
  66   1      }
  67          
  68          void ContrUart_RX(INT8U Uartx,bit Contr)
  69          {
  70   1          if((Uartx&UART_1) == UART_1)
  71   1          {
  72   2          if(Contr == Enable)
  73   2          {
  74   3            REN = 1;
  75   3          }
  76   2          else if(Contr == Disable)
  77   2          {
  78   3            REN = 0;
  79   3          }
  80   2        }
  81   1      
  82   1        if((Uartx&UART_2) == UART_2)
  83   1        {
  84   2          if(Contr == Enable)
  85   2          {
  86   3            S2CON |= 0x10;  //bit4/S2REN
  87   3          }
  88   2          else if(Contr == Disable)
  89   2          {
  90   3            S2CON &= 0xef;  //bit4/S2REN
  91   3          }
  92   2        }
  93   1      }
  94          
  95          bit UartReadFlg(INT8U Uartx,INT8U UartFlg)  //Read a flag one time
  96          {
  97   1        bit StatusTemp=RESET;
  98   1        
  99   1        if(Uartx == UART_1)
 100   1        {
 101   2          switch(UartFlg)
 102   2          {
 103   3            case UART_TI_FLG:StatusTemp = TI;break;
 104   3            case UART_RI_FLG:StatusTemp = RI;break;
 105   3          }
 106   2        }
 107   1        else if(Uartx == UART_2)
 108   1        {
 109   2          switch(UartFlg)
 110   2          {
 111   3            case UART_TI_FLG:StatusTemp = (bit)(S2CON&0x02);break;
 112   3            case UART_RI_FLG:StatusTemp = (bit)(S2CON&0x01);break;
 113   3          }
 114   2        }
 115   1        
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 3   

 116   1        return StatusTemp;
 117   1      }
 118          
 119          void UartClearFlg(INT8U Uartx,INT8U UartFlg)
 120          {
 121   1        if((Uartx&UART_1) == UART_1)
 122   1        {
 123   2          if((UartFlg&UART_TI_FLG) == UART_TI_FLG)
 124   2          {
 125   3            TI = 0;
 126   3          }
 127   2      
 128   2          if((UartFlg&UART_RI_FLG) == UART_RI_FLG)
 129   2          {
 130   3            RI = 0;
 131   3          }
 132   2        }
 133   1      
 134   1        if((Uartx&UART_2) == UART_2)
 135   1        {
 136   2          if((UartFlg&UART_TI_FLG) == UART_TI_FLG)
 137   2          {
 138   3            S2CON &= 0xfd;  //S2TI=0;
 139   3          }
 140   2      
 141   2          if((UartFlg&UART_RI_FLG) == UART_RI_FLG)
 142   2          {
 143   3            S2CON &= 0xfe;  //S2RI=0;
 144   3          }
 145   2        }
 146   1      }
 147          
 148          void RxManageInit(INT8U RxType)
 149          {
 150   1          if((RxType&INTER_RX) == INTER_RX)
 151   1          {
 152   2          memset(BackUpRxBuf,0,INTER_RX_MAX_SIZE);
 153   2          memset(InterRxBuff,0,INTER_RX_MAX_SIZE);
 154   2          #if 1
 155   2          sInterRx.bRxCnt=0;
 156   2          sInterRx.bRxSize=INTER_RX_MAX_SIZE;
 157   2          sInterRx.bRxStatus=BUFF_EMPTY;
 158   2          sInterRx.bRxTimeCnt=0;
 159   2          sInterRx.bRxTimeOut=RX_FINISH_TIME;
 160   2          sInterRx.pRxBuffer = InterRxBuff;
 161   2          #endif
 162   2            #if 0
                  sInterRx.bReadCnt = 0;
                  sInterRx.bRxCnt = 0;
                  sInterRx.bRxLength = 0;
                  sInterRx.bRxSize = INTER_RX_MAX_SIZE;
                  sInterRx.bRxStatus = BUFF_EMPTY;
                  sInterRx.pRxBuffer = InterRxBuff;
                    #endif
 170   2          }
 171   1      
 172   1        if((RxType&EXTER_RX) == EXTER_RX)
 173   1        {
 174   2          memset(ExterRxBuff,0,EXTER_RX_MAX_SIZE);
 175   2          sExterRx.bReadCnt = 0;
 176   2          sExterRx.bRxCnt = 0;
 177   2          sExterRx.bRxLength = 0;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 4   

 178   2          sExterRx.bRxSize = EXTER_RX_MAX_SIZE;
 179   2          sExterRx.bRxStatus = BUFF_EMPTY;
 180   2          sExterRx.pRxBuffer = ExterRxBuff;
 181   2        }
 182   1      }
 183          
 184          void TxManageInit(INT8U TxType)
 185          {
 186   1        if((TxType&INTER_TX) == INTER_TX)
 187   1        {
 188   2          memset(InterTxBuff,0,INTER_TX_MAX_SIZE);
 189   2          sInterTx.bSendLength = 0;
 190   2          sInterTx.bSendStatus = TX_READY;
 191   2          sInterTx.bTxCnt = 0;
 192   2          sInterTx.pSendBuff = InterTxBuff;
 193   2        }
 194   1        if((TxType&EXTER_TX) == EXTER_TX)
 195   1        {
 196   2          memset(ExterTxBuff,0,EXTER_TX_MAX_SIZE);
 197   2          sExterTx.bSendLength = 0;
 198   2          sExterTx.bSendStatus = TX_READY;
 199   2          sExterTx.bTxCnt = 0;
 200   2          sExterTx.pSendBuff = ExterTxBuff;
 201   2        }
 202   1      }
 203          
 204          void UartInit()
 205          {
 206   1        UartConfig(UART_1|UART_2,MCU_BAUD);
 207   1        ContrUart_RX(UART_1|UART_2,Enable);
 208   1        RxManageInit(INTER_RX|EXTER_RX);
 209   1        TxManageInit(INTER_TX|EXTER_TX);
 210   1      }
 211          
 212          INT8U ReadRxData(INT8U* bDataTep,INT8U RxType)
 213          {
 214   1          #if 0
                if(RxType == INTER_RX)
                {
              
                  if(sInterRx.bRxStatus == BUFF_EMPTY)
                  {
                    return BUFF_EMPTY;
                  }
                  else
                  {
                    if(sInterRx.bReadCnt<sInterRx.bRxSize)
                    {
                      *bDataTep = *(sInterRx.pRxBuffer+sInterRx.bReadCnt);
                      sInterRx.bReadCnt++;
                      
                      if(sInterRx.bRxLength > 0)
                      {
                           sInterRx.bRxLength--;
                      }
                      if(sInterRx.bRxLength == 0)
                      {
                        sInterRx.bRxStatus = BUFF_EMPTY;
                        sInterRx.bRxCnt = 0;
                        sInterRx.bReadCnt = 0;
                      }
                      
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 5   

                      return RX_READY;
                    }
                    else
                    {
                      sInterRx.bRxStatus = BUFF_EMPTY;
                      sInterRx.bRxCnt = 0;
                      sInterRx.bReadCnt = 0;
                      sInterRx.bRxLength = 0;
                    }
                  }
                }
                #endif
 252   1      
 253   1        if(RxType == EXTER_RX)
 254   1        {
 255   2          if(sExterRx.bRxStatus == BUFF_EMPTY)
 256   2          {
 257   3            return BUFF_EMPTY;
 258   3          }
 259   2          else
 260   2          {
 261   3            if(sExterRx.bReadCnt<sExterRx.bRxSize)
 262   3            {
 263   4              *bDataTep = *(sExterRx.pRxBuffer+sExterRx.bReadCnt);
 264   4              sExterRx.bReadCnt++;
 265   4              
 266   4              if(sExterRx.bRxLength > 0)
 267   4              {
 268   5                   sExterRx.bRxLength--;
 269   5              }
 270   4              if(sExterRx.bRxLength == 0)
 271   4              {
 272   5                sExterRx.bRxStatus = BUFF_EMPTY;
 273   5                sExterRx.bRxCnt = 0;
 274   5                sExterRx.bReadCnt = 0;
 275   5              }
 276   4      
 277   4              return RX_READY;
 278   4            }
 279   3            else
 280   3            {
 281   4              sExterRx.bRxStatus = BUFF_EMPTY;
 282   4              sExterRx.bRxCnt = 0;
 283   4              sExterRx.bReadCnt = 0;
 284   4              sExterRx.bRxLength = 0;
 285   4            }
 286   3          }
 287   2        }
 288   1      
 289   1        return BUFF_EMPTY;
 290   1      }
 291          
 292          INT8U UartSendData(INT8U TxType,INT8U *OutBuff,INT8U DataLen)
 293          {
 294   1        INT8U i;
 295   1        
 296   1        if(TxType == INTER_TX)
 297   1        {
 298   2          if(sInterTx.bSendStatus == TX_BUSY)
 299   2          {
 300   3            return TX_BUSY;
 301   3          }
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 6   

 302   2          sInterTx.bSendStatus = TX_BUSY;
 303   2          sInterTx.bSendLength = DataLen;
 304   2          sInterTx.bTxCnt = 0;
 305   2          for(i=0;i<DataLen;i++)
 306   2          {
 307   3            *(sInterTx.pSendBuff+i) = *(OutBuff+i);
 308   3          }
 309   2          if(sInterTx.bTxCnt<sInterTx.bSendLength)
 310   2          {
 311   3            S2BUF = *(sInterTx.pSendBuff+sInterTx.bTxCnt);  //start first send
 312   3            sInterTx.bTxCnt++;
 313   3          }
 314   2          else
 315   2          {
 316   3            sInterTx.bSendStatus = TX_READY;
 317   3          }
 318   2        }
 319   1      
 320   1        if(TxType == EXTER_TX)
 321   1        {
 322   2          if(sExterTx.bSendStatus == TX_BUSY)
 323   2          {
 324   3            return TX_BUSY;
 325   3          }
 326   2          sExterTx.bSendStatus = TX_BUSY;
 327   2          sExterTx.bSendLength = DataLen;
 328   2          sExterTx.bTxCnt = 0;
 329   2          for(i=0;i<DataLen;i++)
 330   2          {
 331   3            *(sExterTx.pSendBuff+i) = *(OutBuff+i);
 332   3          }
 333   2          if(sExterTx.bTxCnt<sExterTx.bSendLength)
 334   2          {
 335   3            SBUF = *(sExterTx.pSendBuff+sExterTx.bTxCnt);  //start first send
 336   3            sExterTx.bTxCnt++;
 337   3          }
 338   2          else
 339   2          {
 340   3            sExterTx.bSendStatus = TX_READY;
 341   3          }
 342   2        }
 343   1      
 344   1        return TX_READY;
 345   1      }
 346          
 347          void ReadRegister(INT16U wReadIndex,INT8U *pSendBuf)
 348          {
 349   1        INT16U wReadDataTemp;
 350   1      
 351   1        wReadDataTemp = sDeviceInfoEE.ComAddr;                           //00 
 352   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 353   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 354   1        
 355   1        if(TemperType == TEMPER_MINUS)
 356   1        {
 357   2          wReadDataTemp = wTemperCal + 10000;  //make MSB is 1
 358   2        }
 359   1        else
 360   1        {
 361   2          wReadDataTemp = wTemperCal;
 362   2        }
 363   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);             //01 temperature
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 7   

 364   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 365   1        wReadDataTemp = sDeviceInfoEE.DeviceID;                          //02
 366   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 367   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 368   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp1>>16);           //03
 369   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 370   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 371   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp1&0x0000ffff);    //04
 372   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 373   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 374   1        wReadDataTemp = sDeviceInfoEE.TimerGrp1_Time;                    //05
 375   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8); 
 376   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 377   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.TimerGrp1En;            //06
 378   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 379   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 380   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp2>>16);           //07
 381   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 382   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 383   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp2&0x0000ffff);    //08
 384   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 385   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 386   1        wReadDataTemp = sDeviceInfoEE.TimerGrp2_Time;                    //09
 387   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8); 
 388   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 389   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.TimerGrp2En;            //10
 390   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 391   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 392   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp3>>16);           //11
 393   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 394   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 395   1        wReadDataTemp = (INT16U)(sDeviceInfoEE.TimerGrp3&0x0000ffff);    //12
 396   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 397   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 398   1        wReadDataTemp = sDeviceInfoEE.TimerGrp3_Time;                    //13
 399   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8); 
 400   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 401   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.TimerGrp3En;            //14
 402   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 403   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 404   1        wReadDataTemp = sDeviceInfoEE.HighGrp1;                          //15
 405   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 406   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 407   1        wReadDataTemp = sDeviceInfoEE.HighGrp1_Time;                     //16
 408   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 409   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 410   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.HighGrp1En;             //17
 411   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8); 
 412   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 413   1        wReadDataTemp = sDeviceInfoEE.HighGrp2;                          //18
 414   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 415   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 416   1        wReadDataTemp = sDeviceInfoEE.HighGrp2_Time;                     //19
 417   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 418   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 419   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.HighGrp2En;             //20
 420   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 421   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 422   1        wReadDataTemp = sDeviceInfoEE.HighGrp3;                          //21
 423   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8); 
 424   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 425   1        wReadDataTemp = sDeviceInfoEE.HighGrp3_Time;                     //22
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 8   

 426   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 427   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 428   1        wReadDataTemp = sDeviceInfoEE.sDevInfBit.HighGrp3En;             //23
 429   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 430   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 431   1        wReadDataTemp = (INT16U)(GlabalTimeCnt>>16);               //24
 432   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 433   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 434   1        wReadDataTemp = (INT16U)(GlabalTimeCnt&0x0000ffff);              //25
 435   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 436   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 437   1        wReadDataTemp = (INT16U)(sGPSDtBackUp.dwAtitude>>16);      //26
 438   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 439   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 440   1        wReadDataTemp = (INT16U)(sGPSDtBackUp.dwAtitude&0x0000ffff);   //27
 441   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 442   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 443   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[0],CHAR_TO_NUM));  //28
 444   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 445   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 446   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[1],CHAR_TO_NUM));  //29
 447   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 448   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 449   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[2],CHAR_TO_NUM));  //30
 450   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 451   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 452   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[3],CHAR_TO_NUM)); //31
 453   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 454   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 455   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[4],CHAR_TO_NUM));  //32
 456   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 457   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 458   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[5],CHAR_TO_NUM));  //33
 459   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 460   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 461   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[6],CHAR_TO_NUM));  //34
 462   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 463   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 464   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[7],CHAR_TO_NUM));  //35
 465   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 466   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 467   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[8],CHAR_TO_NUM));  //36
 468   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 469   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 470   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[9],CHAR_TO_NUM));  //37
 471   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 472   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 473   1        wReadDataTemp = (INT16U)(ASCIIConvert(sDeviceInfoEE.tbPhoneNum[10],CHAR_TO_NUM));  //38
 474   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 475   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 476   1        wReadDataTemp = 0;                                                                 //39 //recover eeprom 
             -initial data
 477   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 478   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 479   1          wReadDataTemp = sUserInfoEE.wFaultRecord;                                          //40
 480   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 481   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 482   1        wReadDataTemp = (INT16U)(sUserInfoEE.GlobalTimeRecor>>16);                     //41
 483   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 484   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 485   1        wReadDataTemp = (INT16U)(sUserInfoEE.GlobalTimeRecor&0x0000ffff);                //42
 486   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 9   

 487   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 488   1        wReadDataTemp = (INT16U)((INT32U)sUserInfoEE.MostAtitu>>16);                 //43
 489   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 490   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 491   1        wReadDataTemp = (INT16U)((INT32U)sUserInfoEE.MostAtitu&0x0000ffff);                //44
 492   1        pSendBuf[wReadIndex++] = (INT8U)(wReadDataTemp>>8);
 493   1        pSendBuf[wReadIndex++] = (INT8U)wReadDataTemp;
 494   1      }
 495          
 496          INT8U SetRegister(INT8U bSetAddr,INT16U wSetData,INT8U *pReturnBuf)
 497          {
 498   1        INT8U bSetMessage=0;
 499   1        INT16U CrcTemp=0;
 500   1        
 501   1        switch(bSetAddr)
 502   1        {
 503   2          case 0:
 504   2          {
 505   3            sDeviceInfoEE.ComAddr = wSetData;
 506   3            EprNeedWrt|=DEVICE_BLOCK;
 507   3            
 508   3            pReturnBuf[4] = (INT8U)0;
 509   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.ComAddr);
 510   3            break;
 511   3          }
 512   2          case 2:
 513   2          {
 514   3            sDeviceInfoEE.DeviceID = wSetData;
 515   3            EprNeedWrt|=DEVICE_BLOCK;
 516   3            
 517   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.DeviceID>>8);
 518   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.DeviceID);
 519   3            break;
 520   3          }
 521   2          case 3:
 522   2          {
 523   3            sDeviceInfoEE.TimerGrp1 &= 0x0000ffff;
 524   3            sDeviceInfoEE.TimerGrp1 |= (INT32U)wSetData<<16;
 525   3            EprNeedWrt|=DEVICE_BLOCK;
 526   3            
 527   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp1>>24);
 528   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp1>>16);
 529   3            break;
 530   3          }
 531   2          case 4:
 532   2          {
 533   3            sDeviceInfoEE.TimerGrp1 &= 0xffff0000;
 534   3            sDeviceInfoEE.TimerGrp1 |= (INT32U)wSetData;
 535   3            EprNeedWrt|=DEVICE_BLOCK;
 536   3            
 537   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp1 >> 8);
 538   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp1);
 539   3            break;
 540   3          }
 541   2          case 5:
 542   2          {
 543   3            if(wSetData<3000)
 544   3            {
 545   4              sDeviceInfoEE.TimerGrp1_Time = wSetData;
 546   4              EprNeedWrt|=DEVICE_BLOCK;
 547   4            }
 548   3            else
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 10  

 549   3            {
 550   4              bSetMessage = 1;
 551   4            }
 552   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp1_Time >> 8);
 553   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp1_Time);
 554   3            break;
 555   3          }
 556   2              case 6:
 557   2          {
 558   3            if(wSetData<=1)
 559   3            {
 560   4              sDeviceInfoEE.sDevInfBit.TimerGrp1En = wSetData;
 561   4              EprNeedWrt|=DEVICE_BLOCK;
 562   4            }
 563   3            else
 564   3            {
 565   4              bSetMessage = 1;
 566   4            }
 567   3            pReturnBuf[4] = (INT8U)0;
 568   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.TimerGrp1En;
 569   3            break;
 570   3          }
 571   2              case 7:
 572   2          {
 573   3            sDeviceInfoEE.TimerGrp2 &= 0x0000ffff;
 574   3            sDeviceInfoEE.TimerGrp2 |= (INT32U)wSetData<<16;
 575   3            EprNeedWrt|=DEVICE_BLOCK;
 576   3            
 577   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp2>>24);
 578   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp2>>16);
 579   3            break;
 580   3          }
 581   2          case 8:
 582   2          {
 583   3            sDeviceInfoEE.TimerGrp2 &= 0xffff0000;
 584   3            sDeviceInfoEE.TimerGrp2 |= (INT32U)wSetData;
 585   3            EprNeedWrt|=DEVICE_BLOCK;
 586   3            
 587   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp2 >> 8);
 588   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp2);
 589   3            break;
 590   3          }
 591   2          case 9:
 592   2          {
 593   3            if(wSetData<3000)
 594   3            {
 595   4              sDeviceInfoEE.TimerGrp2_Time = wSetData;
 596   4              EprNeedWrt|=DEVICE_BLOCK;
 597   4            }
 598   3            else
 599   3            {
 600   4              bSetMessage = 1;
 601   4            }
 602   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp2_Time >> 8);
 603   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp2_Time);
 604   3            break;
 605   3          }
 606   2              case 10:
 607   2          {
 608   3            if(wSetData<=1)
 609   3            {
 610   4              sDeviceInfoEE.sDevInfBit.TimerGrp2En = wSetData;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 11  

 611   4              EprNeedWrt|=DEVICE_BLOCK;
 612   4            }
 613   3            else
 614   3            {
 615   4              bSetMessage = 1;
 616   4            }
 617   3            pReturnBuf[4] = (INT8U)0;
 618   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.TimerGrp2En;
 619   3            break;
 620   3          }
 621   2          case 11:
 622   2          {
 623   3            sDeviceInfoEE.TimerGrp3 &= 0x0000ffff;
 624   3            sDeviceInfoEE.TimerGrp3 |= (INT32U)wSetData<<16;
 625   3            EprNeedWrt|=DEVICE_BLOCK;
 626   3            
 627   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp3>>24);
 628   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp3>>16);
 629   3            break;
 630   3          }
 631   2          case 12:
 632   2          {
 633   3            sDeviceInfoEE.TimerGrp3 &= 0xffff0000;
 634   3            sDeviceInfoEE.TimerGrp3 |= (INT32U)wSetData;
 635   3            EprNeedWrt|=DEVICE_BLOCK;
 636   3            
 637   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp3 >> 8);
 638   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp3);
 639   3            break;
 640   3          }
 641   2          case 13:
 642   2          {
 643   3            if(wSetData<3000)
 644   3            {
 645   4              sDeviceInfoEE.TimerGrp3_Time = wSetData;
 646   4              EprNeedWrt|=DEVICE_BLOCK;
 647   4            }
 648   3            else
 649   3            {
 650   4              bSetMessage = 1;
 651   4            }
 652   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.TimerGrp3_Time >> 8);
 653   3            pReturnBuf[5] = (INT8U)(sDeviceInfoEE.TimerGrp3_Time);
 654   3            break;
 655   3          }
 656   2              case 14:
 657   2          {
 658   3            if(wSetData<=1)
 659   3            {
 660   4              sDeviceInfoEE.sDevInfBit.TimerGrp3En = wSetData;
 661   4              EprNeedWrt|=DEVICE_BLOCK;
 662   4            }
 663   3            else
 664   3            {
 665   4              bSetMessage = 1;
 666   4            }
 667   3            pReturnBuf[4] = (INT8U)0;
 668   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.TimerGrp3En;
 669   3            break;
 670   3          }
 671   2              case 15:
 672   2          {
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 12  

 673   3            if(wSetData<=50000)
 674   3            {
 675   4              sDeviceInfoEE.HighGrp1 = wSetData;
 676   4              EprNeedWrt|=DEVICE_BLOCK;
 677   4            }
 678   3            else
 679   3            {
 680   4              bSetMessage = 1;
 681   4            }
 682   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp1>>8);
 683   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp1;
 684   3            break;
 685   3          }
 686   2          case 16:
 687   2          {
 688   3            if(wSetData<=3000)
 689   3            {
 690   4              sDeviceInfoEE.HighGrp1_Time = wSetData;
 691   4              EprNeedWrt|=DEVICE_BLOCK;
 692   4            }
 693   3            else
 694   3            {
 695   4              bSetMessage = 1;
 696   4            }
 697   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp1_Time>>8);
 698   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp1_Time;
 699   3            break;
 700   3          }
 701   2              case 17:
 702   2          {
 703   3            if(wSetData<=1)
 704   3            {
 705   4              sDeviceInfoEE.sDevInfBit.HighGrp1En = wSetData;
 706   4              EprNeedWrt|=DEVICE_BLOCK;
 707   4            }
 708   3            else
 709   3            {
 710   4              bSetMessage = 1;
 711   4            }
 712   3            pReturnBuf[4] = (INT8U)0;
 713   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.HighGrp1En;
 714   3            break;
 715   3              }
 716   2          case 18:
 717   2          {
 718   3            if(wSetData<=50000)
 719   3            {
 720   4              sDeviceInfoEE.HighGrp2 = wSetData;
 721   4              EprNeedWrt|=DEVICE_BLOCK;
 722   4            }
 723   3            else
 724   3            {
 725   4              bSetMessage = 1;
 726   4            }
 727   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp2>>8);
 728   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp2;
 729   3            break;
 730   3          }
 731   2          case 19:
 732   2          {
 733   3            if(wSetData<=3000)
 734   3            {
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 13  

 735   4              sDeviceInfoEE.HighGrp2_Time = wSetData;
 736   4              EprNeedWrt|=DEVICE_BLOCK;
 737   4            }
 738   3            else
 739   3            {
 740   4              bSetMessage = 1;
 741   4            }
 742   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp2_Time>>8);
 743   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp2_Time;
 744   3            break;
 745   3          }
 746   2              case 20:
 747   2          {
 748   3            if(wSetData<=1)
 749   3            {
 750   4              sDeviceInfoEE.sDevInfBit.HighGrp2En = wSetData;
 751   4              EprNeedWrt|=DEVICE_BLOCK;
 752   4            }
 753   3            else
 754   3            {
 755   4              bSetMessage = 1;
 756   4            }
 757   3            pReturnBuf[4] = (INT8U)0;
 758   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.HighGrp2En;
 759   3            break;
 760   3              }
 761   2          case 21:
 762   2          {
 763   3            if(wSetData<=50000)
 764   3            {
 765   4              sDeviceInfoEE.HighGrp3 = wSetData;
 766   4              EprNeedWrt|=DEVICE_BLOCK;
 767   4            }
 768   3            else
 769   3            {
 770   4              bSetMessage = 1;
 771   4            }
 772   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp3>>8);
 773   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp3;
 774   3            break;
 775   3          }
 776   2          case 22:
 777   2          {
 778   3            if(wSetData<=3000)
 779   3            {
 780   4              sDeviceInfoEE.HighGrp3_Time = wSetData;
 781   4              EprNeedWrt|=DEVICE_BLOCK;
 782   4            }
 783   3            else
 784   3            {
 785   4              bSetMessage = 1;
 786   4            }
 787   3            pReturnBuf[4] = (INT8U)(sDeviceInfoEE.HighGrp3_Time>>8);
 788   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.HighGrp3_Time;
 789   3            break;
 790   3          }
 791   2              case 23:
 792   2          {
 793   3            if(wSetData<=1)
 794   3            {
 795   4              sDeviceInfoEE.sDevInfBit.HighGrp3En = wSetData;
 796   4              EprNeedWrt|=DEVICE_BLOCK;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 14  

 797   4            }
 798   3            else
 799   3            {
 800   4              bSetMessage = 1;
 801   4            }
 802   3            pReturnBuf[4] = (INT8U)0;
 803   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.sDevInfBit.HighGrp3En;
 804   3            break;
 805   3              }
 806   2          case 28:
 807   2          {
 808   3            if(wSetData<=9)
 809   3            {
 810   4              sDeviceInfoEE.tbPhoneNum[0] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 811   4              EprNeedWrt|=DEVICE_BLOCK;
 812   4            }
 813   3            else
 814   3            {
 815   4              bSetMessage = 1;
 816   4            }
 817   3            pReturnBuf[4] = (INT8U)0;
 818   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[0];
 819   3            break;
 820   3              }
 821   2          case 29:
 822   2          {
 823   3            if(wSetData<=9)
 824   3            {
 825   4              sDeviceInfoEE.tbPhoneNum[1] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 826   4              EprNeedWrt|=DEVICE_BLOCK;
 827   4            }
 828   3            else
 829   3            {
 830   4              bSetMessage = 1;
 831   4            }
 832   3            pReturnBuf[4] = (INT8U)0;
 833   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[1];
 834   3            break;
 835   3              }
 836   2          case 30:
 837   2          {
 838   3            if(wSetData<=9)
 839   3            {
 840   4              sDeviceInfoEE.tbPhoneNum[2] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 841   4              EprNeedWrt|=DEVICE_BLOCK;
 842   4            }
 843   3            else
 844   3            {
 845   4              bSetMessage = 1;
 846   4            }
 847   3            pReturnBuf[4] = (INT8U)0;
 848   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[2];
 849   3            break;
 850   3              }
 851   2          case 31:
 852   2          {
 853   3            if(wSetData<=9)
 854   3            {
 855   4              sDeviceInfoEE.tbPhoneNum[3] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 856   4              EprNeedWrt|=DEVICE_BLOCK;
 857   4            }
 858   3            else
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 15  

 859   3            {
 860   4              bSetMessage = 1;
 861   4            }
 862   3            pReturnBuf[4] = (INT8U)0;
 863   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[3];
 864   3            break;
 865   3              }
 866   2          case 32:
 867   2          {
 868   3            if(wSetData<=9)
 869   3            {
 870   4              sDeviceInfoEE.tbPhoneNum[4] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 871   4              EprNeedWrt|=DEVICE_BLOCK;
 872   4            }
 873   3            else
 874   3            {
 875   4              bSetMessage = 1;
 876   4            }
 877   3            pReturnBuf[4] = (INT8U)0;
 878   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[4];
 879   3            break;
 880   3              }
 881   2          case 33:
 882   2          {
 883   3            if(wSetData<=9)
 884   3            {
 885   4              sDeviceInfoEE.tbPhoneNum[5] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 886   4              EprNeedWrt|=DEVICE_BLOCK;
 887   4            }
 888   3            else
 889   3            {
 890   4              bSetMessage = 1;
 891   4            }
 892   3            pReturnBuf[4] = (INT8U)0;
 893   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[5];
 894   3            break;
 895   3              }
 896   2          case 34:
 897   2          {
 898   3            if(wSetData<=9)
 899   3            {
 900   4              sDeviceInfoEE.tbPhoneNum[6] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 901   4              EprNeedWrt|=DEVICE_BLOCK;
 902   4            }
 903   3            else
 904   3            {
 905   4              bSetMessage = 1;
 906   4            }
 907   3            pReturnBuf[4] = (INT8U)0;
 908   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[6];
 909   3            break;
 910   3              }
 911   2          case 35:
 912   2          {
 913   3            if(wSetData<=9)
 914   3            {
 915   4              sDeviceInfoEE.tbPhoneNum[7] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 916   4              EprNeedWrt|=DEVICE_BLOCK;
 917   4            }
 918   3            else
 919   3            {
 920   4              bSetMessage = 1;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 16  

 921   4            }
 922   3            pReturnBuf[4] = (INT8U)0;
 923   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[7];
 924   3            break;
 925   3              }
 926   2          case 36:
 927   2          {
 928   3            if(wSetData<=9)
 929   3            {
 930   4              sDeviceInfoEE.tbPhoneNum[8] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 931   4              EprNeedWrt|=DEVICE_BLOCK;
 932   4            }
 933   3            else
 934   3            {
 935   4              bSetMessage = 1;
 936   4            }
 937   3            pReturnBuf[4] = (INT8U)0;
 938   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[8];
 939   3            break;
 940   3              }
 941   2          case 37:
 942   2          {
 943   3            if(wSetData<=9)
 944   3            {
 945   4              sDeviceInfoEE.tbPhoneNum[9] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 946   4              EprNeedWrt|=DEVICE_BLOCK;
 947   4            }
 948   3            else
 949   3            {
 950   4              bSetMessage = 1;
 951   4            }
 952   3            pReturnBuf[4] = (INT8U)0;
 953   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[9];
 954   3            break;
 955   3              }
 956   2          case 38:
 957   2          {
 958   3            if(wSetData<=9)
 959   3            {
 960   4              sDeviceInfoEE.tbPhoneNum[10] = ASCIIConvert(wSetData,NUM_TO_CHAR);
 961   4              EprNeedWrt|=DEVICE_BLOCK;
 962   4            }
 963   3            else
 964   3            {
 965   4              bSetMessage = 1;
 966   4            }
 967   3            pReturnBuf[4] = (INT8U)0;
 968   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[10];
 969   3            break;
 970   3              }
 971   2          case 39:
 972   2          {
 973   3            if(wSetData == 1)
 974   3            {
 975   4              EEprDtInit();
 976   4              EprNeedWrt|=(DEVICE_BLOCK|USER_BLOCK);
 977   4            }
 978   3            else
 979   3            {
 980   4              bSetMessage = 1;
 981   4            }
 982   3            pReturnBuf[4] = (INT8U)0;
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 17  

 983   3            pReturnBuf[5] = (INT8U)sDeviceInfoEE.tbPhoneNum[10];
 984   3            break;
 985   3              }
 986   2          default:
 987   2          {
 988   3            bSetMessage = 1;
 989   3            pReturnBuf[4] = 0;
 990   3            pReturnBuf[5] = 0;
 991   3            break;
 992   3          }
 993   2        }
 994   1      
 995   1        if(bSetMessage == 0)
 996   1        {
 997   2          CrcTemp = usMBCRC16(ExterTxBuff,6);
 998   2          ExterTxBuff[6] = (INT8U)CrcTemp;
 999   2          ExterTxBuff[7] = (INT8U)(CrcTemp>>8);
1000   2          return 8;   //length = 8
1001   2        }
1002   1        else
1003   1        {
1004   2          ExterTxBuff[1] = 0x06|0x08;
1005   2          ExterTxBuff[2] = 0x01;
1006   2          CrcTemp = usMBCRC16(ExterTxBuff,3);
1007   2          ExterTxBuff[3] = (INT8U)CrcTemp;
1008   2          ExterTxBuff[4] = (INT8U)(CrcTemp>>8);
1009   2          return 5;   //length = 5
1010   2        }
1011   1      }
1012          
1013          void ProtocolParse(INT8U *bDataBuf)
1014          {
1015   1        INT16U wStartAdrr;
1016   1        INT16U wNumOfReg;
1017   1        INT16U wSetData;
1018   1        INT8U bSendLenth;
1019   1        INT16U CrcTemp;
1020   1        INT8U i=0;
1021   1      
1022   1        memset(ExterTxBuff,0,EXTER_TX_MAX_SIZE);
1023   1      
1024   1        if((bDataBuf[0] != sDeviceInfoEE.ComAddr) && (bDataBuf[0] != 0))
1025   1        {
1026   2          return;
1027   2        }
1028   1        
1029   1          ExterTxBuff[0] = sDeviceInfoEE.ComAddr;  //device addrress
1030   1          ExterTxBuff[1] = bDataBuf[1];  
1031   1        
1032   1        if(bDataBuf[1] == 0x03)
1033   1        {
1034   2          wStartAdrr = bDataBuf[2]*256 + bDataBuf[3];
1035   2          wNumOfReg = bDataBuf[4]*256 + bDataBuf[5];
1036   2          
1037   2          if((wNumOfReg<(REG_NUM-wStartAdrr))&&(wStartAdrr<REG_NUM))
1038   2          {
1039   3            ReadRegister(3,ExterTxBuff);
1040   3      
1041   3            ExterTxBuff[2] = wNumOfReg*2;
1042   3      
1043   3            for(i=0;i<(wNumOfReg*2);i++)
1044   3            {
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 18  

1045   4              ExterTxBuff[i+3] = ExterTxBuff[3+i+wStartAdrr*2];
1046   4            }
1047   3            
1048   3                  bSendLenth = 3+wNumOfReg*2;  //head 3 byte + wNumOfReg*2
1049   3                  
1050   3            CrcTemp = usMBCRC16(ExterTxBuff,bSendLenth);
1051   3            ExterTxBuff[3+wNumOfReg*2] = (INT8U)CrcTemp;  //CRC
1052   3            ExterTxBuff[4+wNumOfReg*2] = (INT8U)(CrcTemp>>8);
1053   3            bSendLenth = bSendLenth+2;  // + crc two byte
1054   3          }
1055   2          else
1056   2          {
1057   3            ExterTxBuff[1] = 0x03|0x08;
1058   3            ExterTxBuff[2] = 0x01;
1059   3            CrcTemp = usMBCRC16(ExterTxBuff,3);
1060   3            ExterTxBuff[3] = (INT8U)CrcTemp;
1061   3            ExterTxBuff[4] = (INT8U)(CrcTemp>>8);
1062   3            bSendLenth = 5;
1063   3          }
1064   2          
1065   2          while(UartSendData(EXTER_TX,ExterTxBuff,bSendLenth) == TX_BUSY);
1066   2        }
1067   1        else if(bDataBuf[1] == 0x06)
1068   1        {
1069   2          wStartAdrr = bDataBuf[2]*256 + bDataBuf[3];
1070   2          wSetData = bDataBuf[4]*256 + bDataBuf[5];
1071   2          
1072   2          ExterTxBuff[2] = bDataBuf[2];
1073   2          ExterTxBuff[3] = bDataBuf[3];
1074   2          if(wStartAdrr>=REG_NUM)
1075   2          {
1076   3            ExterTxBuff[1] = 0x06|0x08;
1077   3            ExterTxBuff[2] = 0x01;
1078   3            CrcTemp = usMBCRC16(ExterTxBuff,3);
1079   3            ExterTxBuff[3] = (INT8U)CrcTemp;
1080   3            ExterTxBuff[4] = (INT8U)(CrcTemp>>8);
1081   3            bSendLenth = 5;
1082   3          }
1083   2          else
1084   2          {
1085   3            bSendLenth = SetRegister(wStartAdrr,wSetData,ExterTxBuff);
1086   3          }
1087   2          
1088   2          while(UartSendData(EXTER_TX,ExterTxBuff,bSendLenth) == TX_BUSY);
1089   2        }
1090   1      }
1091          
1092          void ExterComTask(INT8U TaskNum)
1093          {
1094   1        static INT8U bReadIndex=0;
1095   1        INT8U bDataTemp;
1096   1        INT16U CrcTemp=0;
1097   1        
1098   1        TaskStaChk(TaskNum);
1099   1        
1100   1        bReadIndex = 0;
1101   1        while(ReadRxData(&bDataTemp,EXTER_RX) == RX_READY)
1102   1          {
1103   2          switch(bReadIndex)
1104   2          {
1105   3            case 0:
1106   3            {
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 19  

1107   4              tbExterTempBuf[bReadIndex] = bDataTemp;
1108   4              bReadIndex++;
1109   4              break;
1110   4            }
1111   3            case 1:
1112   3            {
1113   4              if((bDataTemp == 0x03) || (bDataTemp == 0x06))
1114   4              {
1115   5                tbExterTempBuf[bReadIndex] = bDataTemp;
1116   5                bReadIndex++;
1117   5              }
1118   4              else
1119   4              {
1120   5                bReadIndex = 0;
1121   5              }
1122   4              break;
1123   4            }
1124   3            default:
1125   3            {
1126   4              if(bReadIndex<8)
1127   4              {
1128   5                tbExterTempBuf[bReadIndex] = bDataTemp;
1129   5                bReadIndex++;
1130   5                if(bReadIndex >= 8)
1131   5                {
1132   6                  bReadIndex = 0;
1133   6                  CrcTemp = usMBCRC16(tbExterTempBuf,6);
1134   6                  if((tbExterTempBuf[6]==(CrcTemp&0xff))&&(tbExterTempBuf[7]==(CrcTemp>>8)))  //crc check
1135   6                  {
1136   7                     ProtocolParse(tbExterTempBuf);
1137   7                  }
1138   6                }
1139   5              }
1140   4          
1141   4              break;
1142   4            }
1143   3          }
1144   2        }
1145   1        
1146   1        TaskPend(TaskNum);
1147   1      }
1148          
1149          
1150          
1151          
1152          
1153          
1154          
1155          
1156          
1157          
1158          
1159          
1160          
1161          
1162          
1163          
1164          
1165          
1166          
1167          
1168          
C51 COMPILER V9.51   COMMUTASK                                                             06/07/2018 15:04:26 PAGE 20  

1169          
1170          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6496    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    585    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      42
   IDATA SIZE       =     28    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
