C51 COMPILER V9.51   DS18B20                                                               06/07/2018 15:04:26 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ..\object\DS18B20.obj
COMPILER INVOKED BY: E:\StudySoftWareInstall\keil4\C51\BIN\C51.EXE ..\user_files\DS18B20.c BROWSE INCDIR(..\user_files) 
                    -DEBUG OBJECTEXTEND PRINT(.\DS18B20.lst) TABS(2) OBJECT(..\object\DS18B20.obj)

line level    source

   1          #include"Stc12c5a.h"
   2          #include"Global.h"
   3          #include"IO.h"
   4          #include"DS18B20.h"
   5          #include <string.h>
   6          #include"MC20.h"
   7          
   8          
   9          #define DS18B20_PORT  IO_0
  10          #define DS18B20_PIN   PIN_3 
  11          #define DS18B20_DATA_PIN  P03
  12          
  13          
  14          #define IGNOR_ROM     0xcc
  15          #define STR_TMP_TRANS 0x44
  16          #define READ_RAM      0xbe
  17          #define WRT_RAM       0x4e
  18          
  19          #define ACCURACY      5   //9 bit,accuracy is 0.5,amplify 10x
  20          
  21          #define DEVECE_EXIST  0
  22          
  23          INT16U wTemperCal=0;
  24          INT8U TemperType = 0;
  25          
  26          INT8U DS_Reset()
  27          {
  28   1        INT8U bTemp=0;
  29   1        
  30   1        DS18B20_DATA_PIN = 0;                        //pull bus low 
  31   1        Delay_1p8us(330);                            //597us to reset
  32   1        DS18B20_DATA_PIN = 1;                        //release bus
  33   1        Delay_1p8us(42);                             //wait 78.6us to read bus 
  34   1        bTemp = Read_IO(DS18B20_PORT,DS18B20_PIN);   //if return 0 indicate device is exsist ,else not exsist
  35   1        Delay_1p8us(165);                            //delay 300us to wait bus recover
  36   1          DS18B20_DATA_PIN = 1;                        //release bus
  37   1          
  38   1        return bTemp;
  39   1      }
  40          
  41          void DS_WriteData(INT8U bData)
  42          {
  43   1        INT8U i;
  44   1      
  45   1        for(i=0;i<8;i++)
  46   1        {
  47   2          DS18B20_DATA_PIN = 0;                //pull bus low to prepare to write
  48   2          Delay_1p8us(0);                      // 3.08us
  49   2          if((bData&0x01) == 1)
  50   2          {
  51   3            DS18B20_DATA_PIN = 1;
  52   3          }
  53   2          else
  54   2          {
C51 COMPILER V9.51   DS18B20                                                               06/07/2018 15:04:26 PAGE 2   

  55   3            DS18B20_DATA_PIN = 0;
  56   3          }
  57   2          Delay_1p8us(37);                   //69.6us//delay at least 60us to complish writing
  58   2          DS18B20_DATA_PIN = 1;              //release bus 
  59   2          Delay_1p8us(0);                    //3.08us//continous writing need to delay some time(>1us)
  60   2          bData>>=1;
  61   2        }
  62   1      }
  63          
  64          INT8U DS_ReadData()
  65          {
  66   1        INT8U i;
  67   1        INT8U bTemp=0;
  68   1      
  69   1        for(i=0;i<8;i++)
  70   1        {
  71   2          DS18B20_DATA_PIN = 0;    //pull bus low to prepare to read
  72   2          Delay_1p8us(0);          //3.08us// >1us
  73   2          DS18B20_DATA_PIN = 1;    //release bus
  74   2          Delay_1p8us(0);          //after 3.08us,read data
  75   2          if(Read_IO(DS18B20_PORT,DS18B20_PIN)==SET)
  76   2          {
  77   3            bTemp|=(0x01<<i);
  78   3          }
  79   2          Delay_1p8us(32);        //60.6us
  80   2          DS18B20_DATA_PIN = 1;   //release bus
  81   2          Delay_1p8us(0);         //3.08us//continous reading need to delay some time(>1us)
  82   2        }
  83   1        return bTemp;
  84   1      }
  85          
  86          void DS_Init()
  87          {
  88   1        Config_IO(DS18B20_PORT,DS18B20_PIN,OPEN_DRAIN_MODE);
  89   1        DS18B20_DATA_PIN = 1;      //release bus
  90   1        delayN_Tick(20);
  91   1        DS_Reset();
  92   1        DS_WriteData(IGNOR_ROM);
  93   1        DS_WriteData(WRT_RAM);
  94   1        DS_WriteData(0x60);  //+96
  95   1        DS_WriteData(0xe0);  //-96
  96   1        DS_WriteData(0x1f);  //9bit  93.75ms
  97   1      }
  98          
  99          void GetTemperChar(INT8U TemperType)
 100          {
 101   1        INT16U TemperTemp=0;
 102   1      
 103   1        TemperTemp = wTemperCal;
 104   1      
 105   1          if(TemperType == TEMPER_MINUS)
 106   1          {
 107   2          sGPSData.sTemperSta.tbTemper[0] = '-';
 108   2          }
 109   1        else if(TemperType == TEMPER_PLUS)
 110   1        {
 111   2          sGPSData.sTemperSta.tbTemper[0] = '+';
 112   2        }
 113   1      
 114   1        sGPSData.sTemperSta.tbTemper[1] = ASCIIConvert((TemperTemp/1000),NUM_TO_CHAR);
 115   1        TemperTemp = TemperTemp%1000;
 116   1        sGPSData.sTemperSta.tbTemper[2] = ASCIIConvert((TemperTemp/100),NUM_TO_CHAR);
C51 COMPILER V9.51   DS18B20                                                               06/07/2018 15:04:26 PAGE 3   

 117   1        TemperTemp = TemperTemp%100;
 118   1        sGPSData.sTemperSta.tbTemper[3] = ASCIIConvert((TemperTemp/10),NUM_TO_CHAR);
 119   1      
 120   1        memcpy(sGPSDtBackUp.sTemperSta.bMark,sGPSData.sTemperSta.bMark,7);  //backup
 121   1      }
 122          void TemperCtr()
 123          {
 124   1        INT8U LSB_Data=0;
 125   1        INT8U MSB_Data=0;
 126   1        static INT8U LowTemCnt1=0;
 127   1        static INT8U HighTemCnt1 = 0;
 128   1        static INT8U LowTemCnt2 = 0;
 129   1        static INT8U HighTemCnt2 = 0;
 130   1        static bit Flag=0;
 131   1      
 132   1          if(DS_Reset()==DEVECE_EXIST)  //if device is ok
 133   1          {
 134   2          DS_WriteData(IGNOR_ROM);
 135   2          if(Flag == 0)
 136   2          {
 137   3            Flag = 1;
 138   3            DS_WriteData(STR_TMP_TRANS); //since it needs about 100ms to convert,current tick start convert,next ti
             -ck read termperature
 139   3          }
 140   2          else                             
 141   2          {
 142   3            Flag = 0;
 143   3            DS_WriteData(READ_RAM);
 144   3            LSB_Data = DS_ReadData();
 145   3            MSB_Data = DS_ReadData();
 146   3      
 147   3            wTemperCal = MSB_Data*256 + LSB_Data;
 148   3            if((MSB_Data&0xf8) != 0)             //MSB high 5 bits are 1, negtive temperature
 149   3            {
 150   4              wTemperCal = ((~wTemperCal)>>3)+1;
 151   4              TemperType = TEMPER_MINUS;
 152   4            }
 153   3            else
 154   3            {
 155   4              wTemperCal = wTemperCal>>3;
 156   4              TemperType = TEMPER_PLUS;
 157   4            }
 158   3            
 159   3            wTemperCal = wTemperCal*ACCURACY;   //accuracy is 0.5 degree,amplify x10
 160   3      
 161   3            if(TemperType == TEMPER_MINUS)
 162   3            {
 163   4              if(wTemperCal>150)  //if <-15
 164   4              {
 165   5                HighTemCnt2 = 0;
 166   5                LowTemCnt2++;
 167   5                if(LowTemCnt2>=10)  //2s
 168   5                {
 169   6                  LowTemCnt2 = 0;
 170   6                  Reset_IO(TEMPER_CTR_PORT,TEMPER_CTR_PIN);
 171   6                }
 172   5              }
 173   4              else if(wTemperCal <130)
 174   4              {
 175   5                LowTemCnt2 = 0;
 176   5                HighTemCnt2++;
 177   5                if(HighTemCnt2>=5)
C51 COMPILER V9.51   DS18B20                                                               06/07/2018 15:04:26 PAGE 4   

 178   5                {
 179   6                  HighTemCnt2 = 0;
 180   6                  Set_IO(TEMPER_CTR_PORT,TEMPER_CTR_PIN);
 181   6                }
 182   5              }
 183   4              else
 184   4              {
 185   5                HighTemCnt2 = 0;
 186   5                LowTemCnt2 = 0;
 187   5              }
 188   4            }
 189   3            else if(TemperType == TEMPER_PLUS)
 190   3            {
 191   4              if(wTemperCal>50)
 192   4              {
 193   5                LowTemCnt1 = 0;
 194   5                HighTemCnt1++;
 195   5                if(HighTemCnt1 >5)
 196   5                {
 197   6                  HighTemCnt1 = 0;
 198   6                  Reset_IO(TEMPER_CTR_PORT,TEMPER_CTR_PIN);
 199   6                }
 200   5              }
 201   4              else if(wTemperCal<10)
 202   4              {
 203   5                HighTemCnt1 = 0;
 204   5                LowTemCnt1++;
 205   5                if(LowTemCnt1>5)
 206   5                {
 207   6                  LowTemCnt1 = 0;
 208   6                  Set_IO(TEMPER_CTR_PORT,TEMPER_CTR_PIN);
 209   6                }
 210   5              }
 211   4              else
 212   4              {
 213   5                HighTemCnt1 = 0;
 214   5                LowTemCnt1 = 0;
 215   5              }
 216   4            }
 217   3      
 218   3            GetTemperChar(TemperType);
 219   3          }
 220   2          }
 221   1      }
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
 234          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    642    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.51   DS18B20                                                               06/07/2018 15:04:26 PAGE 5   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
