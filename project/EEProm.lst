C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\object\EEProm.obj
COMPILER INVOKED BY: E:\StudySoftWareInstall\keil4\C51\BIN\C51.EXE ..\user_files\EEProm.c BROWSE INCDIR(..\user_files) D
                    -EBUG OBJECTEXTEND PRINT(.\EEProm.lst) TABS(2) OBJECT(..\object\EEProm.obj)

line level    source

   1          #include"Stc12c5a.h"
   2          #include"Global.h"
   3          #include"EEProm.h"
   4          #include"intrins.h"
   5          #include"MC20.h"
   6          
   7          #define IAP_CMD_STANDBY  0x00
   8          #define IAP_CMD_READ     0x01
   9          #define IAP_CMD_PROGRAM  0x02
  10          #define IAP_CMD_ERASE    0x03
  11          
  12          #define IAP_FORBID       0x00
  13          #define IAP_ENABLE       0x82  //sysclk<20M
  14          //#define IAP_ENABLE       0x83  //sysclk<12
  15          //#define IAP_ENABLE       0x84  //sysclk<6
  16          
  17          #define IAP_SECTION1_ADDR   0x0000
  18          #define IAP_SECTION2_ADDR   0x0200
  19          #define IAP_INVALID_ADDR    0x8000  //this address IAP fuc is invalid,so it can prevent misuse
  20          
  21          #define ERASE_FAIL          0x00
  22          #define ERASE_OK            0x01
  23          #define IAP_DELAY           200
  24          
  25          #define DEVICE_BLOCK        0x01
  26          #define USER_BLOCK          0x02
  27          #define DEVCE_BL_STRADDR    IAP_SECTION1_ADDR
  28          #define USER_BL_STRADDR     IAP_SECTION2_ADDR
  29          
  30          #define EEPROM_OK           0x00
  31          #define BL1_READ_FL         0x01
  32          #define BL1_WRIT_FL         0x02
  33          #define BL2_READ_FL         0x04
  34          #define BL2_WRIT_FL         0x08
  35          #define BL1_ERASE_FL        0x10
  36          #define BL2_ERASE_FL        0x20
  37          
  38          #define MAX_BLOCK_SIZE      512
  39          
  40          INT8U EprNeedWrt=0;
  41          
  42          xdata sDeviceInf sDeviceInfoEE;
  43          xdata sUserInf   sUserInfoEE;
  44          
  45          void IAP_Exit()
  46          {
  47   1        IAP_CONTR = IAP_FORBID;
  48   1        IAP_CMD = IAP_CMD_STANDBY;
  49   1        IAP_TRIG = 0x00;
  50   1        IAP_ADDRH = (IAP_INVALID_ADDR>>8);  
  51   1        IAP_ADDRL = 0x00;
  52   1      }
  53          
  54          INT8U IAP_ReadByte(INT16U Addr)
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 2   

  55          {
  56   1        INT8U DataTemp;
  57   1      
  58   1        IAP_CONTR = IAP_ENABLE;
  59   1        IAP_CMD = IAP_CMD_READ;
  60   1        IAP_ADDRL = Addr;
  61   1        IAP_ADDRH = Addr>>8;
  62   1        IAP_TRIG = 0x5a;
  63   1        IAP_TRIG = 0xa5;
  64   1        _nop_();
  65   1        DataTemp = IAP_DATA;
  66   1        IAP_Exit();
  67   1        return DataTemp;
  68   1      }
  69          
  70          void IAP_ProgramByte(INT16U Addr,INT8U Dat)
  71          {
  72   1        IAP_CONTR = IAP_ENABLE;
  73   1        IAP_CMD = IAP_CMD_PROGRAM;
  74   1        IAP_ADDRL = Addr;
  75   1        IAP_ADDRH = Addr>>8;
  76   1        IAP_DATA = Dat;
  77   1        IAP_TRIG = 0x5a;
  78   1        IAP_TRIG = 0xa5;
  79   1        _nop_();
  80   1        IAP_Exit();
  81   1      }
  82          
  83          INT8U IAP_EraseSector(INT16U SectorAddr)  
  84          {
  85   1        INT16U i;
  86   1        
  87   1        IAP_CONTR = IAP_ENABLE;
  88   1        IAP_CMD = IAP_CMD_ERASE;
  89   1        IAP_ADDRL = SectorAddr;
  90   1        IAP_ADDRH = SectorAddr>>8;
  91   1        IAP_TRIG = 0x5a;
  92   1        IAP_TRIG = 0xa5;
  93   1        _nop_();
  94   1        _nop_();
  95   1        _nop_();
  96   1        IAP_Exit();
  97   1      
  98   1        for(i=0;i<MAX_BLOCK_SIZE;i++)
  99   1        {
 100   2          if(IAP_ReadByte(SectorAddr+i) != 0xff)
 101   2          {
 102   3            return ERASE_FAIL;
 103   3          }
 104   2      
 105   2        }
 106   1        
 107   1        return ERASE_OK;
 108   1      }
 109          
 110          INT8U ReadEEPrData(INT8U Block)
 111          {
 112   1        INT8U *PStruct;
 113   1        INT8U bResult=EEPROM_OK;
 114   1        INT16U i;
 115   1        INT16U wCrcChk=0;
 116   1      
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 3   

 117   1          bResult=EEPROM_OK;
 118   1        
 119   1        if((Block&DEVICE_BLOCK) == DEVICE_BLOCK)
 120   1        {
 121   2          ClrFault(EEPROM_READ_FALI);
 122   2          
 123   2          PStruct = (INT8U *)&sDeviceInfoEE;
 124   2          for(i=0;i<DEVICE_INFO_SIZE+2;i++)
 125   2          {
 126   3            tbComUseBuf[i] = IAP_ReadByte(DEVCE_BL_STRADDR+i);
 127   3          }
 128   2          wCrcChk = tbComUseBuf[DEVICE_INFO_SIZE]*256 + tbComUseBuf[DEVICE_INFO_SIZE+1];
 129   2          if(usMBCRC16(tbComUseBuf,DEVICE_INFO_SIZE) != wCrcChk)
 130   2          {
 131   3            bResult |= BL1_READ_FL;
 132   3          }
 133   2          else
 134   2          {
 135   3            for(i=0;i<DEVICE_INFO_SIZE;i++)
 136   3            {
 137   4              *((INT8U*)(PStruct+i)) = tbComUseBuf[i];
 138   4            }
 139   3          }
 140   2      
 141   2          if((bResult & BL1_READ_FL) != 0)  // user block is not important data for the moment,so,do not care its 
             -data is correct or not
 142   2          {
 143   3            SetFault(EEPROM_READ_FALI);
 144   3          }
 145   2        }
 146   1        
 147   1        if((Block&USER_BLOCK) == USER_BLOCK)
 148   1        {
 149   2          PStruct = (INT8U *)&sUserInfoEE;
 150   2          for(i=0;i<USER_INFO_SEZE+2;i++)
 151   2          {
 152   3            tbComUseBuf[i] = IAP_ReadByte(USER_BL_STRADDR+i);
 153   3          }
 154   2          wCrcChk = tbComUseBuf[USER_INFO_SEZE]*256 + tbComUseBuf[USER_INFO_SEZE+1];
 155   2          if(usMBCRC16(tbComUseBuf,USER_INFO_SEZE) != wCrcChk)
 156   2          {
 157   3            bResult |= BL2_READ_FL;
 158   3          }
 159   2          else
 160   2          {
 161   3              for(i=0;i<USER_INFO_SEZE;i++)
 162   3            {
 163   4              *((INT8U*)(PStruct+i)) = tbComUseBuf[i];
 164   4            }
 165   3          }
 166   2        }
 167   1        
 168   1        return bResult;
 169   1      }
 170          
 171          INT8U WriteEEPrData(INT8U Block)
 172          {
 173   1        INT8U *PStruct;
 174   1        INT8U bTimes=0;
 175   1        INT8U bResult=EEPROM_OK;
 176   1        INT16U i;
 177   1        INT16U wCrcChk=0;
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 4   

 178   1      
 179   1        bResult=EEPROM_OK;
 180   1        
 181   1        if((Block&DEVICE_BLOCK) == DEVICE_BLOCK)
 182   1        {
 183   2          ClrFault(EEPROM_WRITE_FAIL);
 184   2          
 185   2          PStruct = (INT8U *)&sDeviceInfoEE;
 186   2          for(i=0;i<DEVICE_INFO_SIZE;i++)
 187   2          {
 188   3            tbComUseBuf[i] = *((INT8U*)(PStruct+i));
 189   3          }
 190   2          wCrcChk = usMBCRC16(tbComUseBuf,DEVICE_INFO_SIZE);
 191   2          tbComUseBuf[DEVICE_INFO_SIZE] = (INT8U)(wCrcChk>>8);
 192   2          tbComUseBuf[DEVICE_INFO_SIZE+1] = (INT8U)wCrcChk;
 193   2      
 194   2          for(bTimes=0;bTimes<3;bTimes++)  //erase 3 times,if erase fail
 195   2          {
 196   3            if(IAP_EraseSector(IAP_SECTION1_ADDR) == ERASE_OK)
 197   3            {
 198   4              bResult &= ~BL1_ERASE_FL;
 199   4              break;
 200   4            }
 201   3            else
 202   3            {
 203   4              bResult |= BL1_ERASE_FL;
 204   4            }
 205   3          }
 206   2      
 207   2          if((bResult&BL1_ERASE_FL) == 0)
 208   2          {
 209   3            for(bTimes=0;bTimes<3;bTimes++)
 210   3            {
 211   4              for(i=0;i<DEVICE_INFO_SIZE+2;i++)
 212   4              {
 213   5                IAP_ProgramByte(DEVCE_BL_STRADDR+i,tbComUseBuf[i]);
 214   5              }
 215   4              
 216   4              for(i=0;i<DEVICE_INFO_SIZE+2;i++)  //check if write success
 217   4              {
 218   5                if(IAP_ReadByte(DEVCE_BL_STRADDR+i) != tbComUseBuf[i])
 219   5                {
 220   6                  bResult |= BL1_WRIT_FL;
 221   6                  break;
 222   6                }
 223   5                else
 224   5                {
 225   6                  bResult &= ~BL1_WRIT_FL;
 226   6                }
 227   5              }
 228   4              if((bResult&BL1_WRIT_FL) == 0)
 229   4              {
 230   5                break;
 231   5              }
 232   4            }
 233   3          }
 234   2      
 235   2          if(((bResult&BL1_WRIT_FL) != 0) || ((bResult&BL1_ERASE_FL) != 0))  // user block is not important data f
             -or the moment,so,do not care its data is correct or not
 236   2          {
 237   3            SetFault(EEPROM_WRITE_FAIL);
 238   3          }
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 5   

 239   2        }
 240   1      
 241   1        if((Block&USER_BLOCK) == USER_BLOCK)
 242   1        {
 243   2          PStruct = (INT8U *)&sUserInfoEE;
 244   2          for(i=0;i<USER_INFO_SEZE;i++)
 245   2          {
 246   3            tbComUseBuf[i] = *((INT8U*)(PStruct+i));
 247   3          }
 248   2          wCrcChk = usMBCRC16(tbComUseBuf,USER_INFO_SEZE);
 249   2          tbComUseBuf[USER_INFO_SEZE] = (INT8U)(wCrcChk>>8);
 250   2          tbComUseBuf[USER_INFO_SEZE+1] = (INT8U)wCrcChk;
 251   2      
 252   2          for(bTimes=0;bTimes<3;bTimes++)  //erase 3 times,if erase fail
 253   2          {
 254   3            if(IAP_EraseSector(IAP_SECTION2_ADDR) == ERASE_OK)
 255   3            {
 256   4              bResult &= ~BL2_ERASE_FL;
 257   4              break;
 258   4            }
 259   3            else
 260   3            {
 261   4              bResult |= BL2_ERASE_FL;
 262   4            }
 263   3          }
 264   2      
 265   2          if((bResult&BL2_ERASE_FL) == 0)
 266   2          {
 267   3            for(bTimes=0;bTimes<3;bTimes++)
 268   3            {
 269   4              for(i=0;i<USER_INFO_SEZE+2;i++)
 270   4              {
 271   5                IAP_ProgramByte(USER_BL_STRADDR+i,tbComUseBuf[i]);
 272   5              }
 273   4              
 274   4              for(i=0;i<USER_INFO_SEZE+2;i++)
 275   4              {
 276   5                if(IAP_ReadByte(USER_BL_STRADDR+i) != tbComUseBuf[i])
 277   5                {
 278   6                  bResult |= BL2_WRIT_FL;
 279   6                  break;
 280   6                }
 281   5                else
 282   5                {
 283   6                  bResult &= ~BL2_WRIT_FL;
 284   6                }
 285   5              }
 286   4              if((bResult&BL2_WRIT_FL) == 0)
 287   4              {
 288   5                break;
 289   5              }
 290   4            }
 291   3          }
 292   2        }
 293   1        
 294   1        return bResult;
 295   1      }
 296          
 297          void EEprDtInit()
 298          {
 299   1        sDeviceInfoEE.ComAddr = 0x01;
 300   1        sDeviceInfoEE.DeviceID = 0x007d;
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 6   

 301   1        
 302   1          sDeviceInfoEE.TimerGrp1 = 90000;          //if read eeprom fail,do some thing to prevent malfunction
 303   1        sDeviceInfoEE.TimerGrp1_Time = 0;    //3 min
 304   1        sDeviceInfoEE.TimerGrp2 = 90000;
 305   1        sDeviceInfoEE.TimerGrp2_Time = 0;
 306   1        sDeviceInfoEE.TimerGrp3 = 90000;
 307   1        sDeviceInfoEE.TimerGrp3_Time = 0;
 308   1        
 309   1        sDeviceInfoEE.HighGrp1 = 50000;
 310   1        sDeviceInfoEE.HighGrp1_Time = 0;
 311   1        sDeviceInfoEE.HighGrp2 = 50000;
 312   1        sDeviceInfoEE.HighGrp2_Time = 0;
 313   1        sDeviceInfoEE.HighGrp3 = 50000;
 314   1        sDeviceInfoEE.HighGrp3_Time = 0;
 315   1        
 316   1        sDeviceInfoEE.sDevInfBit.TimerGrp1En = 0;
 317   1        sDeviceInfoEE.sDevInfBit.TimerGrp2En = 0;
 318   1          sDeviceInfoEE.sDevInfBit.TimerGrp3En = 0;
 319   1          sDeviceInfoEE.sDevInfBit.HighGrp1En = 0;
 320   1          sDeviceInfoEE.sDevInfBit.HighGrp2En = 0;
 321   1          sDeviceInfoEE.sDevInfBit.HighGrp3En = 0;
 322   1        sDeviceInfoEE.sDevInfBit.Reserved = 0;
 323   1      
 324   1        sDeviceInfoEE.tbPhoneNum[0] = '1';
 325   1        sDeviceInfoEE.tbPhoneNum[1] = '3';
 326   1        sDeviceInfoEE.tbPhoneNum[2] = '0';
 327   1        sDeviceInfoEE.tbPhoneNum[3] = '6';
 328   1        sDeviceInfoEE.tbPhoneNum[4] = '6';
 329   1        sDeviceInfoEE.tbPhoneNum[5] = '8';
 330   1        sDeviceInfoEE.tbPhoneNum[6] = '8';
 331   1        sDeviceInfoEE.tbPhoneNum[7] = '2';
 332   1        sDeviceInfoEE.tbPhoneNum[8] = '8';
 333   1        sDeviceInfoEE.tbPhoneNum[9] = '6';
 334   1        sDeviceInfoEE.tbPhoneNum[10] = '0';
 335   1        
 336   1        sUserInfoEE.GlobalTimeRecor = 0;
 337   1        sUserInfoEE.MostAtitu = 0;
 338   1        sUserInfoEE.wFaultRecord = 0;
 339   1      }
 340          
 341          void CheckIfNewMcu()
 342          {
 343   1        INT8U i;
 344   1        INT8U DevicBlkCnt=0;
 345   1        INT8U UserBlkCnt=0;
 346   1      
 347   1          if(ReadEEPrData(DEVICE_BLOCK) != EEPROM_OK)
 348   1        {
 349   2          WriteEEPrData(DEVICE_BLOCK);
 350   2        }
 351   1        else  // in case new mcu eeprom data is all 0xff,but crc is check ok
 352   1        {
 353   2          for(i=0;i<DEVICE_INFO_SIZE;i++)
 354   2          {
 355   3            if(IAP_ReadByte(IAP_SECTION1_ADDR+i) == 0xff)
 356   3            {
 357   4              DevicBlkCnt++;
 358   4            }
 359   3            
 360   3            if(DevicBlkCnt>=DEVICE_INFO_SIZE)
 361   3            {
 362   4              WriteEEPrData(DEVICE_BLOCK);
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 7   

 363   4            }
 364   3          }
 365   2        }
 366   1        
 367   1        if(ReadEEPrData(USER_BLOCK) != EEPROM_OK)
 368   1        {
 369   2          WriteEEPrData(USER_BLOCK);
 370   2        }
 371   1        else  // in case new mcu eeprom data is all 0xff,but crc is check ok
 372   1        {
 373   2          for(i=0;i<USER_INFO_SEZE;i++)
 374   2          {
 375   3            if(IAP_ReadByte(IAP_SECTION2_ADDR+i) == 0xff)
 376   3            {
 377   4              UserBlkCnt++;
 378   4            }
 379   3          }
 380   2          if(UserBlkCnt>=USER_INFO_SEZE)
 381   2          {
 382   3            WriteEEPrData(USER_BLOCK);
 383   3          }
 384   2        }
 385   1      }
 386          
 387          void PowerOnReadEE()
 388          {
 389   1        EEprDtInit();
 390   1        CheckIfNewMcu();
 391   1      }
 392          
 393          void ChkIfNeedWrtEpr()
 394          {
 395   1        static INT8U CycleCnt=0;
 396   1      
 397   1        if(CycleCnt<50)
 398   1        {
 399   2          CycleCnt++;
 400   2          return;
 401   2        }
 402   1        else
 403   1        {
 404   2          CycleCnt = 0;
 405   2        }
 406   1        
 407   1        if((EprNeedWrt & DEVICE_BLOCK) == DEVICE_BLOCK)
 408   1        {
 409   2          EprNeedWrt &= ~DEVICE_BLOCK;
 410   2          WriteEEPrData(DEVICE_BLOCK);
 411   2        }
 412   1        else if((EprNeedWrt & USER_BLOCK) == USER_BLOCK)
 413   1        {
 414   2          EprNeedWrt &= ~USER_BLOCK;
 415   2          WriteEEPrData(USER_BLOCK);
 416   2        }
 417   1      }
 418          
 419          
 420          
 421          
 422          
 423          
 424          
C51 COMPILER V9.51   EEPROM                                                                06/07/2018 15:04:25 PAGE 8   

 425          
 426          
 427          
 428          
 429          
 430          
 431          
 432          
 433          
 434          
 435          
 436          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1325    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     55    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
